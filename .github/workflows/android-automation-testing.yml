name: Android Automation Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  android-automation-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Prevent hanging workflows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Install dependencies with legacy peer deps to handle compatibility issues
        echo "Installing dependencies..."
        npm install --legacy-peer-deps || {
          echo "ERROR: npm install failed"
          echo "Package.json content:"
          cat package.json
          echo "Detailed npm error log:"
          tail -50 ~/.npm/_logs/*.log 2>/dev/null || echo "No npm logs found"
          exit 1
        }
        echo "✅ Dependencies installed successfully"
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        
    - name: Cache AVD
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-29
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
        
    - name: Setup Android Emulator and Build App
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        emulator-boot-timeout: 900
        disable-animations: true
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Starting Android emulator setup and testing workflow"
          
          # Wait for emulator to be fully ready
          echo "⏳ Waiting for Android emulator to be ready..."
          adb wait-for-device
          sleep 30
          
          # Check emulator status
          echo "📱 Checking emulator status..."
          adb devices -l
          
          # Prebuild to create native Android project
          echo "🔧 Building native Android project..."
          export CI=true
          export EXPO_NO_TELEMETRY=1
          npx expo prebuild --platform android --clean || {
            echo "❌ ERROR: expo prebuild failed"
            echo "Current directory contents:"
            ls -la
            exit 1
          }
          
          # Verify android directory was created
          if [ ! -d "android" ]; then
            echo "❌ ERROR: android directory not created by prebuild"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          
          # Verify essential Android files were created
          REQUIRED_FILES=("android/build.gradle" "android/app/build.gradle" "android/settings.gradle")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ ERROR: Required Android file missing: $file"
              echo "This indicates prebuild did not complete successfully"
              exit 1
            fi
          done
          
          echo "✅ Android project generated successfully"
          echo "📁 Android directory contents:"
          ls -la android/
          echo ""
          echo "🔍 Checking for gradle files:"
          find android/ -name "*gradle*" -type f | head -10
          
          # Build the APK
          echo "🏗️ Building Android APK..."
          cd android
          
          # Verify gradlew exists, generate if missing
          if [ ! -f "gradlew" ]; then
            echo "⚠️ WARNING: gradlew not found, attempting to generate gradle wrapper"
            echo "Android directory contents:"
            ls -la
            echo ""
            
            # Try to generate gradle wrapper if gradle is available
            if command -v gradle >/dev/null 2>&1; then
              echo "Generating gradle wrapper..."
              gradle wrapper || {
                echo "❌ ERROR: Failed to generate gradle wrapper"
                exit 1
              }
            else
              echo "❌ ERROR: Neither gradlew nor gradle found"
              echo "This suggests expo prebuild did not complete successfully"
              exit 1
            fi
          fi
          
          chmod +x gradlew
          ./gradlew assembleDebug --info || {
            echo "❌ ERROR: Gradle build failed"
            echo "Gradle wrapper info:"
            ls -la gradlew gradle/
            exit 1
          }
          
          # Find and install the APK
          echo "📦 Installing APK on emulator..."
          APK_PATH=$(find . -name "*.apk" -path "*/debug/*" | head -1)
          if [ -z "$APK_PATH" ]; then
            echo "❌ ERROR: No debug APK found"
            find . -name "*.apk" -ls
            exit 1
          fi
          
          echo "Installing: $APK_PATH"
          adb install "$APK_PATH"
          
          # Verify installation
          echo "✅ Verifying app installation..."
          adb shell pm list packages | grep com.voyager.rn
          
          # Setup automation environment
          echo "🔧 Setting up automation environment..."
          cd ../automation
          npm install --legacy-peer-deps
          npm install -g appium
          appium driver install uiautomator2
          
          # Start Appium
          echo "🚀 Starting Appium server..."
          appium --log-level info &
          APPIUM_PID=$!
          sleep 10
          
          # Verify Appium
          echo "🔍 Verifying Appium server..."
          curl -f http://localhost:4723/status
          
          # Run tests
          echo "🧪 Running automation tests..."
          PLATFORM=android npx wdio run wdio.mobile.conf.ts --spec tests/mobile/travel-preferences.test.ts
          
          # Cleanup
          echo "🧹 Cleaning up..."
          kill $APPIUM_PID || true
          
    - name: Kill crashpad_handler processes (Fix for emulator hanging)
      if: always()
      run: |
        echo "🧹 Cleaning up remaining processes..."
        
        # Check for running processes
        echo "Checking for crashpad_handler processes:"
        pgrep -l crashpad_handler || echo "No crashpad_handler processes found"
        
        echo "Checking for qemu processes:"
        pgrep -l qemu || echo "No qemu processes found"
        
        # Kill crashpad_handler processes (known to cause hanging)
        echo "Terminating crashpad_handler processes..."
        pkill -SIGTERM crashpad_handler 2>/dev/null || true
        sleep 5
        pkill -SIGKILL crashpad_handler 2>/dev/null || true
        
        # Also kill any remaining emulator processes
        echo "Terminating any remaining emulator processes..."
        pkill -SIGTERM qemu-system 2>/dev/null || true
        sleep 3
        pkill -SIGKILL qemu-system 2>/dev/null || true
        
        echo "✅ Process cleanup complete"
          
    - name: Capture test artifacts on failure
      if: failure()
      run: |
        echo "Capturing debug information..."
        
        # Capture emulator screenshot
        adb exec-out screencap -p > automation/android-screenshot.png || true
        
        # Capture logcat
        adb logcat -d > automation/android-logcat.log || true
        
        # List installed packages for debugging
        adb shell pm list packages > automation/android-packages.txt || true
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-test-results-${{ github.run_number }}
        path: |
          automation/logs/
          automation/screenshots/
          automation/*.log
          automation/*.png
          automation/*.txt