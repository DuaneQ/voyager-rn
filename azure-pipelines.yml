# Azure DevOps Pipeline for iOS Automation Testing
# Trigger on main and develop branches

trigger:
- main
- develop

pr:
- main 
- develop

pool:
  vmImage: 'macOS-latest'

variables:
  NODE_VERSION: '18.x'

stages:
- stage: iOSAutomationTests
  displayName: 'iOS Automation Testing'
  
  jobs:
  - job: RuniOSTests
    displayName: 'Run iOS Automation Tests'
    
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(NODE_VERSION)'
        
    - task: Npm@1
      displayName: 'Install Dependencies'
      inputs:
        command: 'ci'
        
    - script: |
        # List available simulators
        xcrun simctl list devices available
        
        # Boot iPhone 15 simulator (or fallback to available) 
        SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 15" | head -1 | grep -o '[A-F0-9-]\{36\}')
        if [ -z "$SIMULATOR_ID" ]; then
          # Fallback to iPhone 14 if iPhone 15 not available
          SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 14" | head -1 | grep -o '[A-F0-9-]\{36\}')
        fi
        
        echo "Using simulator: $SIMULATOR_ID"
        xcrun simctl boot "$SIMULATOR_ID"
        echo "##vso[task.setvariable variable=SIMULATOR_ID]$SIMULATOR_ID"
      displayName: 'Setup iOS Simulator'
      
    - script: |
        # Prebuild and generate native iOS project
        export CI=true
        export EXPO_NO_TELEMETRY=1
        npx expo install --fix
        npx expo prebuild --platform ios --clean
      displayName: 'Generate Native iOS Project'
      
    - script: |
        # Build the native iOS app for simulator testing
        cd ios
        
        # Build for iOS Simulator (bundle ID already correct in app.json)
        xcodebuild -workspace voyager.xcworkspace \
          -scheme voyager \
          -configuration Debug \
          -sdk iphonesimulator \
          -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
          -derivedDataPath build \
          build
          
        # Find and copy the built app
        APP_PATH=$(find build -name "*.app" | head -1)
        echo "Built app at: $APP_PATH"
        echo "##vso[task.setvariable variable=APP_PATH]$APP_PATH"
      displayName: 'Build Native iOS App for Testing'
      
    - script: |
        # Install the built native app on simulator
        if [ ! -z "$(APP_PATH)" ] && [ -d "$(APP_PATH)" ]; then
          xcrun simctl install "$(SIMULATOR_ID)" "$(APP_PATH)"
          echo "Installed native app on simulator: $(APP_PATH)"
        else
          echo "Warning: APP_PATH not found, app installation may have failed"
          exit 1
        fi
      displayName: 'Install Native App on Simulator'
      
    - task: Npm@1
      displayName: 'Install Automation Dependencies'
      inputs:
        command: 'ci'
        workingDir: 'automation'
        
    - script: |
        cd automation
        npx appium &
        APPIUM_PID=$!
        echo "##vso[task.setvariable variable=APPIUM_PID]$APPIUM_PID"
        
        # Wait for Appium to start
        sleep 10
      displayName: 'Start Appium Server'
      
    - script: |
        cd automation
        # Set environment variables for native app testing
        export PLATFORM=ios
        export APP_PATH="$(APP_PATH)"
        export SIMULATOR_ID="$(SIMULATOR_ID)"
        export CI=true
        
        npx wdio run wdio.mobile.conf.ts --spec tests/mobile/travel-preferences.test.ts
      displayName: 'Run iOS Automation Tests'
      condition: always()
      
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'automation/test-results/*.xml'
        failTaskOnFailedTests: false
        
    - task: PublishBuildArtifacts@1
      displayName: 'Upload Test Artifacts'
      condition: always()
      inputs:
        PathtoPublish: |
          automation/logs/
          automation/screenshots/
          automation/*.log
        ArtifactName: 'ios-test-results'
        
    - script: |
        # Kill background processes
        if [ ! -z "$(DEV_SERVER_PID)" ]; then
          kill $(DEV_SERVER_PID) || true
        fi
        if [ ! -z "$(APPIUM_PID)" ]; then
          kill $(APPIUM_PID) || true
        fi
        
        # Shutdown simulator
        xcrun simctl shutdown "$(SIMULATOR_ID)" || true
      displayName: 'Cleanup'
      condition: always()