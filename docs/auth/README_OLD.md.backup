# Authentication Flow Documentation

## Overview

The voyager-RN authentication system implements a **S.O.L.I.D-based architecture** that mirrors the PWA's authentication behavior while providing a more maintainable and testable codebase for mobile platforms.

---

## Architecture Diagram

```
┌─────────────────────────────────────────────────────────────────┐
│                         USER INTERFACE                           │
│  ┌─────────────────┐  ┌──────────────────┐  ┌────────────────┐ │
│  │  LoginScreen    │  │  RegisterScreen  │  │  AuthScreen    │ │
│  │  (Primary)      │  │  (Full Profile)  │  │  (4 Forms)     │ │
│  └────────┬────────┘  └─────────┬────────┘  └────────┬───────┘ │
└───────────┼────────────────────┼─────────────────────┼──────────┘
            │                    │                      │
            └────────────────────┴──────────────────────┘
                                 │
                    ┌────────────▼────────────┐
                    │     useAuth() Hook      │
                    │   (Context Consumer)    │
                    └────────────┬────────────┘
                                 │
            ┌────────────────────┴────────────────────┐
            │                                         │
┌───────────▼──────────┐                 ┌───────────▼──────────┐
│   AuthContext        │                 │   AlertContext       │
│   (State Manager)    │                 │   (Notifications)    │
│                      │                 └──────────────────────┘
│  - user              │
│  - tokens            │
│  - status            │
│  - error             │
│                      │
│  Methods:            │
│  - signIn()          │
│  - signOut()         │
│  - forgotPassword()  │
│  - resendVerification()│
│  - refreshUser()     │
└──────────┬───────────┘
           │
┌──────────▼────────────┐
│   AuthService         │
│   (Business Logic)    │
│                       │
│  - login()            │
│  - register()         │
│  - forgotPassword()   │
│  - resendVerification()│
│  - getCurrentUser()   │
└──────────┬────────────┘
           │
┌──────────▼────────────┐
│   AuthRepository      │
│   (Data Access)       │
│                       │
│  Implementations:     │
│  ├─ Firebase          │
│  └─ HTTP (placeholder)│
└──────────┬────────────┘
           │
    ┌──────┴──────┐
    │             │
┌───▼────┐   ┌───▼────────┐
│Firebase│   │TokenStorage│
│ Auth   │   │(SecureStore)│
└────────┘   └─────────────┘
```

---

## Component Flow Diagram

```
┌──────────────────────────────────────────────────────────────┐
│                      App Launch                               │
└───────────────────────────┬──────────────────────────────────┘
                            │
                    ┌───────▼────────┐
                    │  AuthProvider  │
                    │  (Initialize)  │
                    └───────┬────────┘
                            │
                ┌───────────▼───────────┐
                │ Check Stored Tokens   │
                │  (TokenStorage.get()) │
                └───────────┬───────────┘
                            │
            ┌───────────────┴───────────────┐
            │                               │
    ┌───────▼────────┐           ┌────────▼────────┐
    │ Tokens Found   │           │  No Tokens      │
    │ Status: loading│           │  Status: idle   │
    └───────┬────────┘           └────────┬────────┘
            │                              │
    ┌───────▼──────────┐          ┌───────▼────────┐
    │ getCurrentUser() │          │  Show Login    │
    └───────┬──────────┘          │    Screen      │
            │                     └────────────────┘
    ┌───────┴────────┐
    │                │
┌───▼────┐    ┌─────▼──────┐
│Success │    │   Failed   │
│        │    │            │
│Status: │    │ Status:    │
│authenti│    │ idle       │
│cated   │    │            │
└───┬────┘    └─────┬──────┘
    │               │
    │         ┌─────▼──────┐
    │         │ Show Login │
    │         │   Screen   │
    │         └────────────┘
    │
┌───▼──────────┐
│  Show Main   │
│  App (Tabs)  │
└──────────────┘
```

---

## User Authentication Flow

### 1. Sign In Flow

```
┌──────────┐
│  User    │
└────┬─────┘
     │ 1. Enter email & password
     │
┌────▼─────────────┐
│  LoginScreen     │
│                  │
│  Validates:      │
│  - Email format  │
│  - Password len  │
└────┬─────────────┘
     │ 2. Calls useAuth().signIn()
     │
┌────▼─────────────┐
│  AuthContext     │
│                  │
│  - Sets loading  │
└────┬─────────────┘
     │ 3. Calls AuthService.login()
     │
┌────▼─────────────┐
│  AuthService     │
│                  │
│  - Validates     │
│  - Maps errors   │
└────┬─────────────┘
     │ 4. Calls repository
     │
┌────▼─────────────────────┐
│ FirebaseAuthRepository   │
│                          │
│ - signInWithEmail...()   │
│ - Checks emailVerified   │
│ - Gets user doc          │
└────┬─────────────────────┘
     │ 5. Returns { user, tokens }
     │
┌────▼─────────────┐
│  AuthContext     │
│                  │
│  - Stores tokens │
│  - Updates state │
│  - Status: auth  │
└────┬─────────────┘
     │ 6. Navigation auto-updates
     │
┌────▼─────────────┐
│  AppNavigator    │
│                  │
│  user ? Main     │
│       : Auth     │
└────┬─────────────┘
     │
┌────▼─────────────┐
│  Main App Tabs   │
│  - Search        │
│  - Videos        │
│  - Chat          │
│  - Profile       │
└──────────────────┘
```

### 2. Sign Out Flow

```
┌──────────┐
│  User    │
└────┬─────┘
     │ Clicks Sign Out
     │
┌────▼─────────────┐
│  Profile/Screen  │
└────┬─────────────┘
     │ Calls useAuth().signOut()
     │
┌────▼─────────────┐
│  AuthContext     │
│                  │
│  - Clears tokens │
│  - Clears user   │
│  - Status: idle  │
└────┬─────────────┘
     │ Navigation auto-updates
     │
┌────▼─────────────┐
│  AppNavigator    │
│                  │
│  Shows Login     │
└──────────────────┘
```

### 3. Forgot Password Flow

```
┌──────────┐
│  User    │
└────┬─────┘
     │ Clicks "Forgot Password"
     │
┌────▼─────────────────────┐
│  LoginScreen             │
│  or AuthScreen           │
│  (Forgot Password Form)  │
└────┬─────────────────────┘
     │ 1. Enter email
     │
┌────▼─────────────┐
│  useAuth()       │
│  .forgotPassword()│
└────┬─────────────┘
     │ 2. Calls AuthService
     │
┌────▼─────────────────────┐
│  FirebaseAuthRepository  │
│                          │
│  sendPasswordResetEmail()│
└────┬─────────────────────┘
     │ 3. Firebase sends email
     │
┌────▼─────────────┐
│  User's Email    │
│  (Reset Link)    │
└──────────────────┘
```

### 4. Email Verification Resend Flow

```
┌──────────┐
│  User    │
└────┬─────┘
     │ Clicks "Resend Verification"
     │
┌────▼──────────────────────┐
│  AuthScreen               │
│  (Resend Verification)    │
└────┬──────────────────────┘
     │ 1. Enter email
     │
┌────▼─────────────┐
│  useAuth()       │
│  .resendVerif()  │
└────┬─────────────┘
     │ 2. Calls AuthService
     │
┌────▼─────────────────────┐
│  FirebaseAuthRepository  │
│                          │
│  sendEmailVerification() │
│  (auth.currentUser)      │
└────┬─────────────────────┘
     │ 3. Firebase sends email
     │
┌────▼─────────────┐
│  User's Email    │
│  (Verify Link)   │
└──────────────────┘
```

---

## State Management

### AuthState Interface

```typescript
interface AuthState {
  user: UserProfile | null;      // Current authenticated user
  tokens: AuthTokens | null;      // Access/refresh tokens
  status: AuthStatus;             // 'idle' | 'loading' | 'authenticated' | 'error'
  error?: string | null;          // Error message if any
}
```

### State Transitions

```
Initial State
└─> status: 'idle', user: null, tokens: null

User Initiates Sign In
└─> status: 'loading', user: null, tokens: null

Sign In Success
└─> status: 'authenticated', user: {...}, tokens: {...}

Sign In Failure
└─> status: 'error', user: null, tokens: null, error: "..."

User Signs Out
└─> status: 'idle', user: null, tokens: null

Token Refresh
└─> status: 'loading' -> 'authenticated' (if success)
```

---

## Security Features

### 1. Token Storage
- **Primary**: `expo-secure-store` (encrypted storage)
- **Fallback**: `AsyncStorage` (if SecureStore unavailable)
- **Auto-cleanup**: Tokens cleared on sign out

### 2. Email Verification
- Users must verify email before accessing app
- Resend verification available
- Checked on every sign in

### 3. Error Handling
- User-friendly error messages
- Backend error codes mapped to readable text
- Rate limiting support
- Network error handling

### 4. Input Validation
- Client-side validation with Zod schemas
- Email format validation
- Password strength requirements:
  - Login: min 6 characters
  - Register: min 8 characters
- Display name validation (min 2 characters)

---

## Navigation Integration

### Conditional Rendering

```typescript
// AppNavigator.tsx
const RootNavigator = () => {
  const { user, status } = useAuth();

  // Show loading while checking auth
  if (status === 'loading') return null;

  return (
    <Stack.Navigator>
      {user ? (
        // Authenticated: Show main app
        <Stack.Screen name="MainApp" component={MainTabNavigator} />
      ) : (
        // Not authenticated: Show login/register
        <Stack.Screen name="Auth" component={AuthStackNavigator} />
      )}
    </Stack.Navigator>
  );
};
```

### Auto-redirect Behavior
- **Sign In Success** → Automatically shows main app tabs
- **Sign Out** → Automatically shows login screen
- **Token Expiry** → Redirects to login
- **No manual navigation needed** - state-driven UI

---

## Error Handling

### Error Code Mapping

```typescript
INVALID_CREDENTIALS     → "Email or password is incorrect."
EMAIL_NOT_VERIFIED      → "Your email is not verified..."
USER_EXISTS            → "An account with this email already exists."
RATE_LIMITED           → "Too many attempts. Please wait..."
NETWORK_ERROR          → "Network error. Check your connection..."
```

### Error Display Flow

```
Error Occurs in Repository
        ↓
Service catches & maps error code
        ↓
Context updates state with error
        ↓
Component shows AlertContext message
        ↓
User sees friendly error message
```

---

## Testing Coverage

### Test Files
- `AuthContext.test.tsx` - Context and hook tests (7 tests)
- `LoginScreen.test.tsx` - UI component tests (7 tests)
- `authUtilities.test.ts` - Validation & error mapping (19 tests)

### Coverage
- **AuthContext**: 81% coverage
- **Validators**: 100% coverage
- **Error Mapping**: 100% coverage

See [Testing Documentation](../../TESTING.md) for details.

---

## Related Documentation

- [Architecture Overview](../architecture/README.md)
- [S.O.L.I.D Principles](../architecture/SOLID.md)
- [Testing Guide](../../TESTING.md)
- [API Reference](./API.md)

---

**Last Updated**: October 23, 2025
